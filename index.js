//Arq. principal que  importa a configura√ß√£o(app) do server.js e inicializa o servidor sem abrir conex√µes.

const app = require('./server')
/*
Importa o objeto app que foi exportado do server.js.
O server.js cont√©m toda a configura√ß√£o do servidor Express, como middlewares, plugins e rotas.
Assim, o index.js n√£o precisa se preocupar com essas configura√ß√µes, ele apenas usa o app para iniciar o servidor.
*/

const PORT = process.env.PORT || 3000;
/*
Define a porta onde o servidor vai rodar.
Se existir a vari√°vel de ambiente PORT, ele usa esse valor; caso contr√°rio, usa a porta padr√£o 3000.
*/

app.listen(PORT, () => {
  console.log(`üöÄ Servidor rodando em http://localhost:${PORT}`);
});
/*
Inicia o servidor Express e faz com que ele escute conex√µes na porta definida.
Quando o servidor come√ßa a rodar, ele exibe a mensagem "üöÄ Servidor rodando em http://localhost:PORT" no terminal.
*/

/*
Resumo do Fluxo do C√≥digo
1. O index.js √© o ponto de entrada da aplica√ß√£o.
a)Ele importa o app do server.js, que cont√©m toda a configura√ß√£o do servidor Express (middlewares, rotas, plugins, etc.).
b)Isso separa responsabilidades, deixando o server.js focado na configura√ß√£o e o index.js focado em iniciar o servidor.

2. Define a porta do servidor.
a)Se houver uma vari√°vel de ambiente PORT, ela ser√° usada.
b)Caso contr√°rio, o servidor rodar√° na porta 3000 por padr√£o.

3. Inicia o servidor.
O m√©todo app.listen(PORT, callback) faz o servidor come√ßar a escutar requisi√ß√µes na porta definida.

Fluxo Resumido em Etapas
1-Configura√ß√£o do servidor (server.js).
2-Importa√ß√£o e inicializa√ß√£o no index.js.
3-Defini√ß√£o da porta.
4-Execu√ß√£o do servidor e exibi√ß√£o da mensagem no console.
*/
